import { Component, OnInit,Input } from '@angular/core';
import {Employee} from './../models/employee.model';
import{Department} from'../model.department';

@Component({
  selector: 'app-displayemployee',
  templateUrl: './displayemployee.component.html',
  styleUrls: ['./displayemployee.component.css']
})
export class DisplayemployeeComponent implements OnInit {
  private employee:Employee;
  private empId:number;
  
  @Input() 
  set _employee(value:Employee){
  
  console.log('this previous value'+(this.employee?this.employee.name:'null'));
  console.log('this next value'+value.name);
  this.employee=value;
  }
  @Input()
  set _empId(value:number){
    
    console.log('this previous value' +this._empId);
    console.log('this next value' +value);
    this.empId=value;
    }
  get _empId(){
    return this.empId;
  }
  
  


  get __employee():Employee{
    return this._employee;
  }
 ngOnChanges(changes: SimpleChanges) {
     
    for(const property of Object.keys(changes))
    {
      
     const change=changes[property];
     console.log(change);
     const from=JSON.stringify(change.previousValue);
     const to=JSON.stringify(change.currentValue);
     console.log('property change from'+from+'to'+to);
    }
   
}





  constructor() {
    console.log(this.employee);
   }   

  ngOnInit() {
    
  }
  }
 
 ---------------------------------------------
 export class ListEmployeeComponent implements OnInit {

  employees:Employee[]=[];
  employeedisplay:Employee;
  empIndex:number=1;
  constructor(private myservice:EmployeeServiceService) { }

  ngOnInit() {
    this.employees=this.myservice.get();
    console.log(this.employees);
    this.employeedisplay=this.employees[0];
    console.log(this.employeedisplay);
    }
    nextEmployee():void{

   if(this.empIndex>2){
    this.empIndex=0;
    this.employeedisplay=this.employees[0];
    }
   else
   {
    console.log(this.empIndex);
    this.employeedisplay=this.employees[this.empIndex];
    this.empIndex++;
     }
    }
}

  
  
 
  /*ngOnChanges(changes: SimpleChanges) {
   
    const previous=changes.employee.previousValue;
    const current=changes.employee.currentValue;
    console.log('previous'+(previous?previous.name:'null');
    console.log('current'+current.name);

  }
*/
  


