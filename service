<!---------------------------services---------------------------->

import { Injectable } from '@angular/core';
import {Http} from '@angular/http';
//import{BehaviorSubject} from 'rxjs/BehaviourSubject';
import {BehaviorSubject} from 'rxjs';
//import 'rxjs/add/operator/map';
//import { Observable, Subject, ReplaySubject, from, of, range } from 'rxjs';
//import { map, filter, switchMap } from 'rxjs/operators';
//import 'rxjs/add/operators/map';


@Injectable({
  providedIn: 'root'
})
export class MyService {

public user=new BehaviorSubject<string>("john");
cast=this.user.asObservable();  


setuser(newuser){
  this.user.next(newuser);
}

getuser(){
  return this.user.asObservable();
}
 
  obj={name:"sundar",rollno:"45"};
  success(){
    return "sucess";
  }


  constructor(private http:Http) { 
  
  }

  fetchdata(){
  
  // return this.http.get('http://jsonplaceholder.typicode.com/posts/1').map((Response)=>Response.json()).subscribe((data)=>data)
  return this.obj;
     }
}




<!-------------------------parent component services------------------>
import { Component, OnInit } from '@angular/core';
import{  FormsModule} from'@angular/forms';
import {MyService} from './../my.service';

@Component({
  selector: 'app-parentcomponent',
  templateUrl: './parentcomponent.component.html',
  styleUrls: ['./parentcomponent.component.css']
})
export class  ParentcomponentComponent implements OnInit {

  /*default:number=5000;
  data:number;
  amount:number;
  show:boolean=false;
  sendvalue(value:number){
    console.log(value);
    //this.data=value;
  }
 
  update(value:number){
    this.amount=value;
    this.show=true;
  }
*/
 name1:string;
  constructor(private userService:MyService) { 
    //this.name1=this.data.obj.name;
    //console.log(this.name1);

  }

  ngOnInit() {
  this.userService.cast.subscribe(name1=>this.name1=name1);
  console.log(this.name1);
  }
  
}

<!-----services using observalbel------------------>
import { Injectable } from '@angular/core';
import {Http} from '@angular/http';
import {User} from './user';
//import{BehaviorSubject} from 'rxjs/BehaviourSubject';
import {BehaviorSubject,Observable} from 'rxjs';


//import 'rxjs/add/operator/map';
//import { Observable, Subject, ReplaySubject, from, of, range } from 'rxjs';
//import { map, filter, switchMap } from 'rxjs/operators';
//import 'rxjs/add/operators/map';


@Injectable({
  providedIn: 'root'
})
export class MyService {

  private credentials$ = new BehaviorSubject<User>({
    amount: "5000",
    reason: "wedding",
    date:"13-8-16"
});
cast=this.credentials$.asObservable();  


setuser(newuser:User){
  console.log(newuser);
  this.credentials$.next(newuser);
}

getuser():Observable<User>{
  console.log(this.credentials$.asObservable());
  return this.credentials$.asObservable();
}
 
  obj={name:"sundar",rollno:"45"};
  success(){
    return "sucess";
  }


  constructor(private http:Http) { 
  
  }

}


-------------------------------------------------------------
import { Component, OnInit } from '@angular/core';
import {User} from './../user';
import {MyService}from './../my.service';

@Component({
  selector: 'app-testcomponent',
  templateUrl: './testcomponent.component.html',
  styleUrls: ['./testcomponent.component.css']
})
export class TestcomponentComponent implements OnInit {

  amount:any;
  reason:any;
  public credentials:User= {
    amount:"myusername",
    reason:"my password",
    date:"mydate"
   };
   
   
   data:any;
   show:boolean=false;
   dep:any[];
   today:any;
   Damount:number=5000;


  constructor(private myservice:MyService) { 
    //this.data=myservice.getuser().subscribe(credentials => this.credentials=credentials);    
    //console.log(this.data);
   
   //console.log(this.credentials);
    this.dep=[];
  }

  ngOnInit() {
  }

  deposit():void{
   this.today=Date.now();
    this.credentials= {
      amount:this.amount,
      reason:this.reason,
      date:this.today
     } 
     console.log(this.credentials);
      console.log("i clicked");
    this.myservice.setuser(this.credentials);
    this.Damount=this.Damount+this.amount;
    this.amount=null;
    this.reason=null;
    }
  
  credit():void{
    this.show=true;
    //this.data=this.myservice.getuser().subscribe(credentials => this.credentials=credentials);
    this.myservice.getuser().subscribe(data=>this.data=data);
    this.dep.push(this.data);
    console.log(this.data);
  }

}




